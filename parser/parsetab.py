
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftNOTnonassocLELTEQleftPLUSMINUSleftMULTDIVrightISVOIDrightATrightDOTAND ASSIGN AT BOOL_CONST CASE CLASS COLON COMMA DARROW DIV DOT ELSE EQ ESAC FI IF IN INHERITS INT_CONST ISVOID LBRACE LE LET LOOP LPAREN LT MINUS MULT NEW NOT OBJECTID OF OR PLUS POOL RBRACE RPAREN SEMI STR_CONST THEN TILDE TYPEID WHILEprogram : class_listclass_list : class_list class SEMI\n                  | class SEMIclass : CLASS TYPEID LBRACE feature_list RBRACE\n            | CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACEfeature_list : feature_list feature SEMI\n                   | emptyfeature : OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACEfeature : OBJECTID COLON TYPEID ASSIGN expr\n               | OBJECTID COLON TYPEIDformal_list : formal_list COMMA formal\n                  | formal\n                  | emptyformal : OBJECTID COLON TYPEIDexpr : BOOL_CONST\n           | INT_CONST\n           | STR_CONST\n           | OBJECTID\n           | new_expr\n           | assign_expr\n           | dispatch_expr\n           | if_expr\n           | while_expr\n           | block_expr\n           | let_expr\n           | case_expr\n           | arithmetic_expr\n           | comparison_expr\n           | unary_expr\n           | paren_exprunary_expr : TILDE expr\n                 | NOT expr\n                 | ISVOID exprarithmetic_expr : expr PLUS expr\n                      | expr MINUS expr\n                      | expr MULT expr\n                      | expr DIV exprcomparison_expr : expr LT expr\n                      | expr LE expr\n                      | expr EQ exprblock_expr : LBRACE block_body RBRACEblock_body : block_body expr SEMI\n                 | expr SEMI\n                 | emptylet_expr : LET let_list IN exprlet_list : let_list COMMA let_binding\n                | let_bindinglet_binding : OBJECTID COLON TYPEID\n                  | OBJECTID COLON TYPEID ASSIGN exprcase_expr : CASE expr OF case_list ESACcase_list : case_list OBJECTID COLON TYPEID DARROW expr SEMI\n                | OBJECTID COLON TYPEID DARROW expr SEMIif_expr : IF expr THEN expr ELSE expr FIwhile_expr : WHILE expr LOOP expr POOLassign_expr : OBJECTID ASSIGN exprdispatch_expr : expr DOT OBJECTID LPAREN expr_list RPAREN\n                    | expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN\n                    | OBJECTID LPAREN expr_list RPARENexpr_list : non_empty_expr_list\n                | emptynon_empty_expr_list : non_empty_expr_list COMMA expr\n                          | exprnew_expr : NEW TYPEIDparen_expr : LPAREN expr RPARENempty :class : CLASS error SEMIfeature : error SEMIexpr : error SEMI'
    
_lr_action_items = {'CLASS':([0,2,6,9,],[4,4,-3,-2,]),'$end':([1,2,6,9,],[0,-1,-3,-2,]),'SEMI':([3,5,8,12,16,17,19,24,30,31,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,79,80,85,91,92,93,95,102,103,104,105,106,107,108,109,112,113,120,127,132,137,139,142,149,152,154,155,],[6,9,12,-66,-4,21,24,-67,-10,-5,-18,-9,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,79,-68,-63,114,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,126,-58,-45,-8,-54,-50,-56,-53,-57,156,157,]),'TYPEID':([4,11,23,32,37,57,71,117,141,146,],[7,15,30,36,67,80,101,129,147,150,]),'error':([4,10,13,14,20,21,25,35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[8,-65,19,-7,-65,-6,19,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-44,56,56,56,-43,56,56,56,-42,56,56,56,56,56,]),'LBRACE':([7,15,35,58,59,60,61,63,64,65,66,67,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[10,20,61,61,61,61,61,61,61,61,61,94,61,61,61,61,61,61,61,61,61,61,-44,61,61,61,-43,61,61,61,-42,61,61,61,61,61,]),'INHERITS':([7,],[11,]),'RBRACE':([10,13,14,20,21,25,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,61,79,80,84,86,91,92,93,95,102,103,104,105,106,107,108,109,112,114,119,120,126,127,137,139,142,149,152,],[-65,16,-7,-65,-6,31,-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-65,-68,-63,112,-44,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-43,132,-58,-42,-45,-54,-50,-56,-53,-57,]),'OBJECTID':([10,13,14,20,21,22,25,34,35,58,59,60,61,62,63,64,65,66,68,69,70,72,73,74,75,76,77,78,84,86,94,110,111,114,115,116,118,121,122,123,126,130,136,138,143,151,153,156,157,],[-65,18,-7,-65,-6,26,18,26,39,39,39,39,39,89,39,39,39,39,39,39,100,39,39,39,39,39,39,39,39,-44,39,39,39,-43,39,89,131,39,39,135,-42,140,39,39,39,39,39,-52,-51,]),'LPAREN':([18,35,39,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,100,110,111,114,115,121,122,126,135,136,138,143,151,153,],[22,58,69,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-44,58,122,58,58,-43,58,58,58,-42,143,58,58,58,58,58,]),'COLON':([18,26,33,89,131,140,],[23,32,37,117,141,146,]),'RPAREN':([22,27,28,29,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,69,79,80,81,91,92,93,95,96,97,98,99,102,103,104,105,106,107,108,109,112,120,122,127,133,134,137,139,142,143,148,149,152,],[-65,33,-12,-13,-14,-11,-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-65,-68,-63,109,-31,-32,-33,-55,120,-59,-60,-62,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-65,-45,-61,142,-54,-50,-56,-65,152,-53,-57,]),'COMMA':([22,27,28,29,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,87,88,91,92,93,95,97,99,102,103,104,105,106,107,108,109,112,120,127,128,129,133,137,139,142,145,149,152,],[-65,34,-12,-13,-14,-11,-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,116,-47,-31,-32,-33,-55,121,-62,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-46,-48,-61,-54,-50,-56,-49,-53,-57,]),'ASSIGN':([30,39,129,],[35,68,138,]),'BOOL_CONST':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-44,41,41,41,-43,41,41,41,-42,41,41,41,41,41,]),'INT_CONST':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-44,42,42,42,-43,42,42,42,-42,42,42,42,42,42,]),'STR_CONST':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-44,43,43,43,-43,43,43,43,-42,43,43,43,43,43,]),'NEW':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-44,57,57,57,-43,57,57,57,-42,57,57,57,57,57,]),'IF':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-44,59,59,59,-43,59,59,59,-42,59,59,59,59,59,]),'WHILE':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-44,60,60,60,-43,60,60,60,-42,60,60,60,60,60,]),'LET':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-44,62,62,62,-43,62,62,62,-42,62,62,62,62,62,]),'CASE':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-44,63,63,63,-43,63,63,63,-42,63,63,63,63,63,]),'TILDE':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-44,64,64,64,-43,64,64,64,-42,64,64,64,64,64,]),'NOT':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-44,65,65,65,-43,65,65,65,-42,65,65,65,65,65,]),'ISVOID':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,86,94,110,111,114,115,121,122,126,136,138,143,151,153,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-44,66,66,66,-43,66,66,66,-42,66,66,66,66,66,]),'DOT':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,101,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,70,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,70,70,70,70,70,70,70,70,70,70,123,70,70,70,70,70,70,70,-64,-41,70,70,-58,70,70,70,70,-54,-50,-56,70,70,-53,-57,70,70,]),'AT':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,71,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-64,-41,71,71,-58,71,71,71,71,-54,-50,-56,71,71,-53,-57,71,71,]),'PLUS':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,72,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,72,72,72,72,72,72,72,-33,72,72,-34,-35,-36,-37,72,72,72,-64,-41,72,72,-58,72,72,72,72,-54,-50,-56,72,72,-53,-57,72,72,]),'MINUS':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,73,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,73,73,73,73,73,73,73,-33,73,73,-34,-35,-36,-37,73,73,73,-64,-41,73,73,-58,73,73,73,73,-54,-50,-56,73,73,-53,-57,73,73,]),'MULT':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,74,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,74,74,74,74,74,74,74,-33,74,74,74,74,-36,-37,74,74,74,-64,-41,74,74,-58,74,74,74,74,-54,-50,-56,74,74,-53,-57,74,74,]),'DIV':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,75,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,75,75,75,75,75,75,75,-33,75,75,75,75,-36,-37,75,75,75,-64,-41,75,75,-58,75,75,75,75,-54,-50,-56,75,75,-53,-57,75,75,]),'LT':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,76,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,76,76,76,76,76,76,76,-33,76,76,-34,-35,-36,-37,None,None,None,-64,-41,76,76,-58,76,76,76,76,-54,-50,-56,76,76,-53,-57,76,76,]),'LE':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,77,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,77,77,77,77,77,77,77,-33,77,77,-34,-35,-36,-37,None,None,None,-64,-41,77,77,-58,77,77,77,77,-54,-50,-56,77,77,-53,-57,77,77,]),'EQ':([39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,109,112,113,119,120,124,125,127,133,137,139,142,144,145,149,152,154,155,],[-18,78,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,78,78,78,78,78,78,78,-33,78,78,-34,-35,-36,-37,None,None,None,-64,-41,78,78,-58,78,78,78,78,-54,-50,-56,78,78,-53,-57,78,78,]),'THEN':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,82,91,92,93,95,102,103,104,105,106,107,108,109,112,120,127,137,139,142,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,110,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-54,-50,-56,-53,-57,]),'LOOP':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,83,91,92,93,95,102,103,104,105,106,107,108,109,112,120,127,137,139,142,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,111,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-54,-50,-56,-53,-57,]),'OF':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,90,91,92,93,95,102,103,104,105,106,107,108,109,112,120,127,137,139,142,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,118,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-54,-50,-56,-53,-57,]),'ELSE':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,91,92,93,95,102,103,104,105,106,107,108,109,112,120,124,127,137,139,142,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,136,-45,-54,-50,-56,-53,-57,]),'POOL':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,91,92,93,95,102,103,104,105,106,107,108,109,112,120,125,127,137,139,142,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,137,-45,-54,-50,-56,-53,-57,]),'FI':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,91,92,93,95,102,103,104,105,106,107,108,109,112,120,127,137,139,142,144,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-54,-50,-56,149,-53,-57,]),'IN':([39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,79,80,87,88,91,92,93,95,102,103,104,105,106,107,108,109,112,120,127,128,129,137,139,142,145,149,152,],[-18,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-68,-63,115,-47,-31,-32,-33,-55,-34,-35,-36,-37,-38,-39,-40,-64,-41,-58,-45,-46,-48,-54,-50,-56,-49,-53,-57,]),'ESAC':([130,156,157,],[139,-52,-51,]),'DARROW':([147,150,],[151,153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'feature_list':([10,20,],[13,25,]),'empty':([10,20,22,61,69,122,143,],[14,14,29,86,98,98,98,]),'feature':([13,25,],[17,17,]),'formal_list':([22,],[27,]),'formal':([22,34,],[28,38,]),'expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[40,81,82,83,85,90,91,92,93,95,99,102,103,104,105,106,107,108,113,119,124,125,127,133,99,144,145,99,154,155,]),'new_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'assign_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'dispatch_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'if_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'while_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'block_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'let_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'case_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'arithmetic_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'comparison_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'paren_expr':([35,58,59,60,61,63,64,65,66,68,69,72,73,74,75,76,77,78,84,94,110,111,115,121,122,136,138,143,151,153,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'block_body':([61,],[84,]),'let_list':([62,],[87,]),'let_binding':([62,116,],[88,128,]),'expr_list':([69,122,143,],[96,134,148,]),'non_empty_expr_list':([69,122,143,],[97,97,97,]),'case_list':([118,],[130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',18),
  ('class_list -> class_list class SEMI','class_list',3,'p_class_list','parser.py',22),
  ('class_list -> class SEMI','class_list',2,'p_class_list','parser.py',23),
  ('class -> CLASS TYPEID LBRACE feature_list RBRACE','class',5,'p_class','parser.py',32),
  ('class -> CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE','class',7,'p_class','parser.py',33),
  ('feature_list -> feature_list feature SEMI','feature_list',3,'p_feature_list','parser.py',40),
  ('feature_list -> empty','feature_list',1,'p_feature_list','parser.py',41),
  ('feature -> OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE','feature',9,'p_feature_method','parser.py',50),
  ('feature -> OBJECTID COLON TYPEID ASSIGN expr','feature',5,'p_feature_attr','parser.py',54),
  ('feature -> OBJECTID COLON TYPEID','feature',3,'p_feature_attr','parser.py',55),
  ('formal_list -> formal_list COMMA formal','formal_list',3,'p_formal_list','parser.py',62),
  ('formal_list -> formal','formal_list',1,'p_formal_list','parser.py',63),
  ('formal_list -> empty','formal_list',1,'p_formal_list','parser.py',64),
  ('formal -> OBJECTID COLON TYPEID','formal',3,'p_formal','parser.py',75),
  ('expr -> BOOL_CONST','expr',1,'p_expr','parser.py',79),
  ('expr -> INT_CONST','expr',1,'p_expr','parser.py',80),
  ('expr -> STR_CONST','expr',1,'p_expr','parser.py',81),
  ('expr -> OBJECTID','expr',1,'p_expr','parser.py',82),
  ('expr -> new_expr','expr',1,'p_expr','parser.py',83),
  ('expr -> assign_expr','expr',1,'p_expr','parser.py',84),
  ('expr -> dispatch_expr','expr',1,'p_expr','parser.py',85),
  ('expr -> if_expr','expr',1,'p_expr','parser.py',86),
  ('expr -> while_expr','expr',1,'p_expr','parser.py',87),
  ('expr -> block_expr','expr',1,'p_expr','parser.py',88),
  ('expr -> let_expr','expr',1,'p_expr','parser.py',89),
  ('expr -> case_expr','expr',1,'p_expr','parser.py',90),
  ('expr -> arithmetic_expr','expr',1,'p_expr','parser.py',91),
  ('expr -> comparison_expr','expr',1,'p_expr','parser.py',92),
  ('expr -> unary_expr','expr',1,'p_expr','parser.py',93),
  ('expr -> paren_expr','expr',1,'p_expr','parser.py',94),
  ('unary_expr -> TILDE expr','unary_expr',2,'p_unary_expr','parser.py',107),
  ('unary_expr -> NOT expr','unary_expr',2,'p_unary_expr','parser.py',108),
  ('unary_expr -> ISVOID expr','unary_expr',2,'p_unary_expr','parser.py',109),
  ('arithmetic_expr -> expr PLUS expr','arithmetic_expr',3,'p_arithmetic_expr','parser.py',118),
  ('arithmetic_expr -> expr MINUS expr','arithmetic_expr',3,'p_arithmetic_expr','parser.py',119),
  ('arithmetic_expr -> expr MULT expr','arithmetic_expr',3,'p_arithmetic_expr','parser.py',120),
  ('arithmetic_expr -> expr DIV expr','arithmetic_expr',3,'p_arithmetic_expr','parser.py',121),
  ('comparison_expr -> expr LT expr','comparison_expr',3,'p_comparison_expr','parser.py',125),
  ('comparison_expr -> expr LE expr','comparison_expr',3,'p_comparison_expr','parser.py',126),
  ('comparison_expr -> expr EQ expr','comparison_expr',3,'p_comparison_expr','parser.py',127),
  ('block_expr -> LBRACE block_body RBRACE','block_expr',3,'p_block_expr','parser.py',131),
  ('block_body -> block_body expr SEMI','block_body',3,'p_block_body','parser.py',135),
  ('block_body -> expr SEMI','block_body',2,'p_block_body','parser.py',136),
  ('block_body -> empty','block_body',1,'p_block_body','parser.py',137),
  ('let_expr -> LET let_list IN expr','let_expr',4,'p_let_expr','parser.py',149),
  ('let_list -> let_list COMMA let_binding','let_list',3,'p_let_list','parser.py',157),
  ('let_list -> let_binding','let_list',1,'p_let_list','parser.py',158),
  ('let_binding -> OBJECTID COLON TYPEID','let_binding',3,'p_let_binding','parser.py',168),
  ('let_binding -> OBJECTID COLON TYPEID ASSIGN expr','let_binding',5,'p_let_binding','parser.py',169),
  ('case_expr -> CASE expr OF case_list ESAC','case_expr',5,'p_case_expr','parser.py',176),
  ('case_list -> case_list OBJECTID COLON TYPEID DARROW expr SEMI','case_list',7,'p_case_list','parser.py',180),
  ('case_list -> OBJECTID COLON TYPEID DARROW expr SEMI','case_list',6,'p_case_list','parser.py',181),
  ('if_expr -> IF expr THEN expr ELSE expr FI','if_expr',7,'p_if_expr','parser.py',190),
  ('while_expr -> WHILE expr LOOP expr POOL','while_expr',5,'p_while_expr','parser.py',194),
  ('assign_expr -> OBJECTID ASSIGN expr','assign_expr',3,'p_assign_expr','parser.py',198),
  ('dispatch_expr -> expr DOT OBJECTID LPAREN expr_list RPAREN','dispatch_expr',6,'p_dispatch_expr','parser.py',202),
  ('dispatch_expr -> expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN','dispatch_expr',8,'p_dispatch_expr','parser.py',203),
  ('dispatch_expr -> OBJECTID LPAREN expr_list RPAREN','dispatch_expr',4,'p_dispatch_expr','parser.py',204),
  ('expr_list -> non_empty_expr_list','expr_list',1,'p_expr_list','parser.py',213),
  ('expr_list -> empty','expr_list',1,'p_expr_list','parser.py',214),
  ('non_empty_expr_list -> non_empty_expr_list COMMA expr','non_empty_expr_list',3,'p_non_empty_expr_list','parser.py',218),
  ('non_empty_expr_list -> expr','non_empty_expr_list',1,'p_non_empty_expr_list','parser.py',219),
  ('new_expr -> NEW TYPEID','new_expr',2,'p_new_expr','parser.py',227),
  ('paren_expr -> LPAREN expr RPAREN','paren_expr',3,'p_paren_expr','parser.py',231),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',235),
  ('class -> CLASS error SEMI','class',3,'p_error_class','parser.py',246),
  ('feature -> error SEMI','feature',2,'p_error_feature','parser.py',250),
  ('expr -> error SEMI','expr',2,'p_error_expr','parser.py',254),
]
